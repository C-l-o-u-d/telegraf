{
  "name": "Telegraf",
  "tagline": "ðŸ“¢ Modern Telegram bot framework for Node.js",
  "body": "## Features\r\n\r\n- Full [Telegram Bot API 2.1](https://core.telegram.org/bots/api) support\r\n- [Inline mode](https://core.telegram.org/bots/api#inline-mode)\r\n- [Middlewares](https://www.npmjs.com/search?q=telegraf-)\r\n- http/https/Connect/express.js webhooks\r\n- Reply via webhook\r\n\r\n## Installation\r\n\r\n```js\r\n$ npm install telegraf\r\n```\r\n\r\n## Example\r\n  \r\n```js\r\nvar Telegraf = require('telegraf');\r\nvar telegraf = new Telegraf(process.env.BOT_TOKEN);\r\n\r\n// Message handling\r\ntelegraf.on('message', function * () {\r\n  this.reply('*42*', { parse_mode: 'Markdown' })\r\n})\r\n\r\ntelegraf.startPolling()\r\n```\r\n\r\n### One more example\r\n\r\n```js\r\nvar Telegraf = require('telegraf');\r\nvar telegraf = new Telegraf(process.env.BOT_TOKEN);\r\n\r\n// Look ma, middleware!\r\nvar sayYoMiddleware = function * (next) {\r\n  yield this.reply('yo')\r\n  yield next\r\n}\r\n\r\n// Command handling\r\ntelegraf.hears('/command', sayYoMiddleware, function * () {\r\n  this.reply('Sure')\r\n})\r\n\r\n// Wow! RegEx\r\ntelegraf.hears(/reverse (.+)/, sayYoMiddleware, function * () {\r\n  this.reply(this.match[1].split('').reverse().join(''))\r\n})\r\n\r\ntelegraf.startPolling()\r\n```\r\n\r\nThere are some other [examples](https://github.com/telegraf/telegraf/tree/master/examples).\r\n\r\n## API\r\n\r\n### Application\r\n\r\nA Telegraf application is an object containing an array of middleware generator functions\r\nwhich are composed and executed in a stack-like manner upon request. Telegraf is similar to many\r\nother middleware systems that you may have encountered such as Koa, Ruby's Rack, Connect, and so on -\r\nhowever a key design decision was made to provide high level \"sugar\" at the otherwise low-level\r\nmiddleware layer. This improves interoperability, robustness, and makes writing middleware much\r\nmore enjoyable. \r\n\r\n```js\r\nvar telegraf = new Telegraf(process.env.BOT_TOKEN)\r\n\r\ntelegraf.on('text', function * (){\r\n  this.reply('Hello World')\r\n})\r\n\r\ntelegraf.startPolling()\r\n```\r\n\r\n### Cascading\r\n\r\nTelegraf middleware cascade in a more traditional way as you may be used to with similar tools -\r\nthis was previously difficult to make user friendly with node's use of callbacks.\r\nHowever with generators we can achieve \"true\" middleware. Contrasting Connect's implementation which\r\nsimply passes control through series of functions until one returns, Telegraf yields \"downstream\", then\r\ncontrol flows back \"upstream\".\r\n\r\nThe following example bot will reply with \"Hello World\", however first the message flows through\r\nthe `logger` middleware to mark when the message has been received. When a middleware invokes `yield next`\r\nthe function suspends and passes control to the next middleware defined. After there are no more\r\nmiddleware to execute downstream, the stack will unwind and each middleware is resumed to perform\r\nits upstream behaviour.\r\n\r\n```js\r\nvar telegraf = new Telegraf(process.env.BOT_TOKEN)\r\n\r\n// Logger middleware\r\ntelegraf.use(function * (next){\r\n  var start = new Date\r\n  this.state.started = start\r\n  yield next\r\n  var ms = new Date - start\r\n  debug('response time %sms', ms)\r\n})\r\n\r\ntelegraf.on('text', function * (){\r\n  this.reply('Hello World')\r\n})\r\n```\r\n\r\n### Context\r\n\r\nA Telegraf Context encapsulates telegram message.\r\nContext is created per request, and is referenced in middleware as the receiver, or the this identifier, as shown in the following snippet:\r\n\r\n```js\r\ntelegraf.use(function * () {\r\n  this.telegraf             // Telegraf instance\r\n  this.updateType           // Update type(message, inline_query, etc.)\r\n  [this.updateSubType]      // Update subtype(text, sticker, audio, etc.)\r\n  [this.message]            // Received message\r\n  [this.editedMessage]      // Edited message\r\n  [this.inlineQuery]        // Received inline query\r\n  [this.chosenInlineResult] // Received inline query result\r\n  [this.callbackQuery]      // Received callback query\r\n  [this.chat]               // Current chat info\r\n  [this.from]               // Sender info\r\n  [this.match]              // Regex match (available only for `hears` handler)\r\n})\r\n```\r\n\r\nThe recommended way to extend application context.\r\n\r\n```js\r\nvar telegraf = new Telegraf(process.env.BOT_TOKEN)\r\n\r\ntelegraf.context.db = {\r\n  getScores: function () { return 42 }\r\n}\r\n\r\ntelegraf.on('text', function * (){\r\n  var scores = this.db.getScores(this.message.from.username)\r\n  this.reply(`${this.message.from.username}: ${score}`)\r\n})\r\n```\r\n\r\n### State\r\n\r\nThe recommended namespace to share information between middlewares.\r\n\r\n```js\r\nvar telegraf = new Telegraf(process.env.BOT_TOKEN)\r\n\r\ntelegraf.use(function * (next) {\r\n  this.state.role = getUserRole(this.message) \r\n  yield next\r\n})\r\n\r\ntelegraf.on('text', function * (){\r\n  this.reply(`Hello ${this.state.role}`)\r\n})\r\n```\r\n\r\n### Session\r\n\r\n```js\r\nvar telegraf = new Telegraf(process.env.BOT_TOKEN)\r\n\r\n// Session state will be lost on app restart\r\ntelegraf.use(Telegraf.memorySession())\r\n\r\ntelegraf.on('text', function * (){\r\n  this.session.counter = this.session.counter || 0\r\n  this.session.counter++\r\n  this.reply(`Message counter:${this.session.counter}`)\r\n})\r\n```\r\n\r\n**Important: For production environment use any of [`telegraf-session-*`](https://www.npmjs.com/search?q=telegraf-session) middleware.**\r\n\r\n\r\n### Telegram WebHook\r\n\r\n```js\r\n\r\nvar telegraf = new Telegraf(process.env.BOT_TOKEN)\r\n\r\n// TLS options\r\nvar tlsOptions = {\r\n  key: fs.readFileSync('server-key.pem'),\r\n  cert: fs.readFileSync('server-cert.pem'),\r\n  // This is necessary only if the client \r\n  // uses the self-signed certificate.\r\n  ca: [ fs.readFileSync('client-cert.pem') ]\r\n}\r\n\r\n// Set telegram webhook\r\ntelegraf.setWebHook('https://server.tld:8443/secret-path', {\r\n  content: 'server-cert.pem'\r\n})\r\n\r\n// Start https webhook\r\ntelegraf.startWebHook('/secret-path', tlsOptions, 8443)\r\n\r\n\r\n// Http webhook, for nginx/heroku users.\r\ntelegraf.startWebHook('/secret-path', null, 5000)\r\n\r\n\r\n// Use webHookCallback() if you want attach telegraf to existing http server\r\nrequire('http')\r\n  .createServer(telegraf.webHookCallback('/secret-path'))\r\n  .listen(3000)\r\n\r\nrequire('https')\r\n  .createServer(tlsOptions, telegraf.webHookCallback('/secret-path'))\r\n  .listen(8443)\r\n\r\n// Connect/Express.js integration\r\nvar express = require('express')\r\nvar app = express()\r\n\r\napp.use(telegraf.webHookCallback('/secret-path'))\r\n\r\napp.get('/', function (req, res) {\r\n  res.send('Hello World!')\r\n})\r\n\r\napp.listen(3000, function () {\r\n  console.log('Example app listening on port 3000!')\r\n})\r\n\r\n```\r\n\r\n### Error Handling\r\n\r\nBy default Telegraf will print all errors to stderr and rethrow error. \r\nTo perform custom error-handling logic you can set `onError` handler:\r\n\r\n```js\r\ntelegraf.onError = function(err){\r\n  log.error('server error', err)\r\n  throw err\r\n}\r\n```\r\n\r\n## API reference\r\n\r\n[Telegraf API reference](https://github.com/telegraf/telegraf/tree/master/api.md)\r\n\r\n## License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2016 Telegraf\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}
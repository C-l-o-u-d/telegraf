{
  "name": "Telegraf",
  "tagline": "Modern Telegram bot framework",
  "body": "[![Build Status](https://img.shields.io/travis/telegraf/telegraf.svg?branch=master&style=flat-square)](https://travis-ci.org/telegraf/telegraf)\r\n[![NPM Version](https://img.shields.io/npm/v/telegraf.svg?style=flat-square)](https://www.npmjs.com/package/telegraf)\r\n\r\nModern Telegram bot framework node.js\r\n\r\n<img src=\"https://dl.dropboxusercontent.com/u/7852024/telegraf.png\" alt=\"Telegraf\" width=\"150px\"/>\r\n\r\n## Installation\r\n\r\n```js\r\n$ npm install telegraf\r\n```\r\n\r\n## Example\r\n  \r\n```js\r\nvar Telegraf = require('telegraf');\r\n\r\nvar app = new Telegraf(process.env.BOT_TOKEN);\r\n\r\n// Text messages handling\r\napp.hears('/answer', function * () {\r\n  this.reply('*42*', { parse_mode: 'Markdown' })\r\n})\r\n\r\n// Look ma, middleware!\r\nvar sayYoMiddleware = function * (next) {\r\n  yield this.reply('yo')\r\n  yield next\r\n}\r\n\r\n// Wow! RegEx\r\napp.hears(/reverse (.+)/, sayYoMiddleware, function * () {\r\n  this.reply(this.match[1].split('').reverse().join(''))\r\n})\r\n\r\napp.startPolling()\r\n```\r\n\r\nThere are some other [examples](https://github.com/telegraf/telegraf/tree/master/examples).\r\n\r\n## API\r\n\r\n### Application\r\n\r\nA Telegraf application is an object containing an array of middleware generator functions\r\nwhich are composed and executed in a stack-like manner upon request. Telegraf is similar to many\r\nother middleware systems that you may have encountered such as Koa, Ruby's Rack, Connect, and so on -\r\nhowever a key design decision was made to provide high level \"sugar\" at the otherwise low-level\r\nmiddleware layer. This improves interoperability, robustness, and makes writing middleware much\r\nmore enjoyable. \r\n\r\n```js\r\nvar Telegraf = require('telegraf')\r\nvar app = new Telegraf(process.env.BOT_TOKEN)\r\n\r\napp.on('text', function * (){\r\n  this.reply('Hello World')\r\n})\r\n\r\napp.startPolling()\r\n```\r\n\r\n### Cascading\r\n\r\nTelegraf middleware cascade in a more traditional way as you may be used to with similar tools -\r\nthis was previously difficult to make user friendly with node's use of callbacks.\r\nHowever with generators we can achieve \"true\" middleware. Contrasting Connect's implementation which\r\nsimply passes control through series of functions until one returns, Telegraf yields \"downstream\", then\r\ncontrol flows back \"upstream\".\r\n\r\nThe following example bot will reply with \"Hello World\", however first the message flows through\r\nthe `logger` middleware to mark when the message has been received. When a middleware invokes `yield next`\r\nthe function suspends and passes control to the next middleware defined. After there are no more\r\nmiddleware to execute downstream, the stack will unwind and each middleware is resumed to perform\r\nits upstream behaviour.\r\n\r\n```js\r\nvar app = new Telegraf(process.env.BOT_TOKEN)\r\n\r\n// Logger middleware\r\napp.use(function * (next){\r\n  var start = new Date\r\n  this.state.started = start\r\n  yield next\r\n  var ms = new Date - start\r\n  debug('response time %sms', ms)\r\n})\r\n\r\napp.on('text', function * (){\r\n  this.reply('Hello World')\r\n})\r\n```\r\n\r\n## Context\r\n\r\nA Telegraf Context encapsulates telegram message.\r\nContext is created per request, and is referenced in middleware as the receiver, or the this identifier, as shown in the following snippet:\r\n\r\n```js\r\napp.use(function * (){\r\n  this.eventType          // Event type\r\n  this.message            // Received message\r\n  this.inlineQuery        // Received inline query\r\n  this.chosenInlineResult // Received inline query result\r\n  this.callbackQuery      // Received callback query\r\n});\r\n```\r\n\r\nThe recommended way to extend application context.\r\n\r\n```js\r\nvar app = new Telegraf(process.env.BOT_TOKEN)\r\n\r\napp.context.db = {\r\n  getScores: function () { return 42 }\r\n}\r\n\r\napp.on('text', function * (){\r\n  var scores = this.db.getScores(this.message.from.username)\r\n  this.reply(`${this.message.from.username}: ${score}`)\r\n})\r\n```\r\n\r\n## State\r\n\r\nThe recommended namespace to share information between middlewares.\r\n\r\n```js\r\nvar app = new Telegraf(process.env.BOT_TOKEN)\r\n\r\napp.use(function * (next) {\r\n  this.state.role = getUserRole(this.message) \r\n  yield next\r\n})\r\n\r\napp.on('text', function * (){\r\n  this.reply(`Hello ${this.state.role}`)\r\n})\r\n```\r\n## Error Handling\r\n\r\nBy default Telegraf will print all errors to stderr and rethrow error. \r\nTo perform custom error-handling logic you can set `onError` handler:\r\n\r\n```js\r\napp.onError = function(err){\r\n  log.error('server error', err)\r\n  \r\n  // If user messages is important for us, we will exit from update loop\r\n  throw err\r\n}\r\n```\r\n\r\n## API reference\r\n\r\n* `Telegraf`\r\n  * [`new Telegraf(token)`](#new)\r\n  * [`.startPolling(timeout, limit)`](#startPolling)\r\n  * [`.startWebHook(token, tlsOptions, port, [host])`](#startWebHook)\r\n  * [`.stop()`](#stop)\r\n  * [`.use(function)`](#use)\r\n  * [`.on(messageType, function)`](#on)\r\n  * [`.hear(string|ReGex, function)`](#hear)\r\n  * [`.sendMessage(chatId, text, extra)`](#sendmessage)\r\n  * [`.forwardMessage(chatId, fromChatId, messageId, extra)`](#forwardmessage)\r\n  * [`.sendLocation(chatId, latitude, longitude, extra)`](#sendlocation)\r\n  * [`.sendPhoto(chatId, photo, extra)`](#sendphoto)\r\n  * [`.sendDocument(chatId, doc, extra)`](#senddocument)\r\n  * [`.sendAudio(chatId, audio, extra)`](#sendaudio)\r\n  * [`.sendSticker(chatId, sticker, extra)`](#sendsticker)\r\n  * [`.sendVideo(chatId, video, extra)`](#sendvideo)\r\n  * [`.sendVoice(chatId, voice, extra)`](#sendvoice)\r\n  * [`.sendChatAction(chatId, action)`](#sendchataction)\r\n  * [`.getMe()`](#getme)\r\n  * [`.getUserProfilePhotos(userId, offset, limit)`](#getuserprofilephotos)\r\n  * [`.getFile(fileId)`](#getfile)\r\n  * [`.getFileLink(fileId)`](#getFileLink)\r\n  * [`.setWebHook(url, cert)`](#setwebhook)\r\n  * [`.removeWebHook()`](#removewebhook)\r\n  * [`.kickChatMember(chatId, userId)`](#kickchatmember)\r\n  * [`.unbanChatMember(chatId, userId)`](#unbanchatmember)\r\n  * [`.answerInlineQuery(inlineQueryId, results, extra)`](#answerinlinequery)\r\n  * [`.answerCallbackQuery(callbackQueryId, text, showAlert)`](#answercallbackquery)\r\n  * [`.editMessageText(chatId, messageId, text, extra)`](#editmessagetext)\r\n  * [`.editMessageCaption(chatId, messageId, caption, extra)`](#editmessagecaption)\r\n  * [`.editMessageReplyMarkup(chatId, messageId, markup, extra)`](#editmessagereplymarkup)\r\n\r\n<a name=\"new\"></a>\r\n#### `Telegraf.new(token)`\r\n\r\nInitialize new app.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| token | `String` | [Bot Token](https://core.telegram.org/bots#3-how-do-i-create-a-bot) |\r\n\r\n* * *\r\n\r\n<a name=\"startPolling\"></a>\r\n#### `Telegraf.startPolling(timeout, limit)`\r\n\r\nStart poll updates.\r\n\r\n| Param | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| timeout | `Int` | 0 | Poll timeout |\r\n| limit | `Int` | 100 | Limits the number of updates to be retrieved |\r\n\r\n* * *\r\n\r\n<a name=\"startWebHook\"></a>\r\n#### `Telegraf.startWebHook(token, tlsOptions, port, [host])`\r\n\r\nStart listening @ `https://host:port/token` for Telegram calls.\r\n\r\n| Param | Type | Description |\r\n| ---  | --- | --- |\r\n| token | `String` | Token |\r\n| tlsOptions | `Object` | [tls server options](https://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener) |\r\n| port | `Int` | Port number |\r\n| host | `String` | Hostname |\r\n\r\n* * *\r\n\r\n<a name=\"stop\"></a>\r\n#### `Telegraf.stop()`\r\n\r\nStop WebHook and polling\r\n\r\n* * *\r\n\r\n<a name=\"use\"></a>\r\n#### `Telegraf.use(middleware)`\r\n\r\nRegisters a middleware.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| middleware | `Function` | Middleware function |\r\n\r\n* * *\r\n\r\n<a name=\"on\"></a>\r\n#### `Telegraf.on(eventType, handler)`\r\n\r\nRegisters handler for provided [event type](#events).\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| eventType | `String` or `Array[String]` | [Event type](#events) |\r\n| handler | `Function` | Handler |\r\n\r\n* * *\r\n\r\n<a name=\"hear\"></a>\r\n#### `Telegraf.hear(pattern, handler)`\r\n\r\nRegisters handler only for `text` events using string pattern or RegEx.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| pattern | `String`/`RegEx` | Pattern or RegEx |\r\n| handler | `Function` | Handler |\r\n\r\n* * *\r\n\r\n<a name=\"sendmessage\"></a>\r\n#### `Telegraf.sendMessage(chatId, text, extra)` => `Promise`\r\n\r\nSends text message.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `Integer`/`String` | Chat id |\r\n| text | `String` | Message |\r\n| extra | `Object` | [Optional parameters](https://core.telegram.org/bots/api#sendmessage)|\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#sendmessage)\r\n* * *\r\n\r\n<a name=\"forwardmessage\"></a>\r\n#### `Telegraf.forwardMessage(chatId, fromChatId, messageId, extra)` => `Promise`\r\n\r\nForwards message.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `Integer`/`String` | Source Chat id |\r\n| fromChatId | `Integer`/`String` | Target Chat id |\r\n| messageId | `Integer` | Message id |\r\n| extra | `Object` | [Optional parameters](https://core.telegram.org/bots/api#forwardmessage)|\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#forwardmessage)\r\n* * *\r\n\r\n<a name=\"sendlocation\"></a>\r\n#### `Telegraf.sendLocation(chatId, latitude, longitude, extra)` => `Promise`\r\n\r\nSends location.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `Integer`/`String` | Chat id |\r\n| latitude | `Integer` | Latitude |\r\n| longitude | `Integer` | Longitude |\r\n| extra | `Object` | [Optional parameters](https://core.telegram.org/bots/api#sendlocation)|\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#sendlocation)\r\n* * *\r\n\r\n<a name=\"sendphoto\"></a>\r\n#### `Telegraf.sendPhoto(chatId, photo, extra)` => `Promise`\r\n\r\nSends photo.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `Integer`/`String` | Chat id |\r\n| photo | [`File`](#file) | Photo |\r\n| extra | `Object` | [Optional parameters](https://core.telegram.org/bots/api#sendphoto)|\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#sendphoto)\r\n* * *\r\n\r\n<a name=\"senddocument\"></a>\r\n#### `Telegraf.sendDocument(chatId, doc, extra)` => `Promise`\r\n\r\nSends document.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `Integer`/`String` | Chat id |\r\n| doc | [`File`](#file) | Document |\r\n| extra | `Object` | [Optional parameters](https://core.telegram.org/bots/api#senddocument)|\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#senddocument)\r\n* * *\r\n\r\n<a name=\"sendaudio\"></a>\r\n#### `Telegraf.sendAudio(chatId, audio, extra)` => `Promise`\r\n\r\nSends audio.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `Integer`/`String` | Chat id |\r\n| audio | [`File`](#file) | Document |\r\n| extra | `Object` | [Optional parameters](https://core.telegram.org/bots/api#sendaudio)|\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#sendaudio)\r\n* * *\r\n\r\n<a name=\"sendsticker\"></a>\r\n#### `Telegraf.sendSticker(chatId, sticker, extra)` => `Promise`\r\n\r\nSends sticker.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `Integer`/`String` | Chat id |\r\n| sticker | [`File`](#file) | Document |\r\n| extra | `Object` | [Optional parameters](https://core.telegram.org/bots/api#sendsticker)|\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#sendsticker)\r\n* * *\r\n\r\n<a name=\"sendvideo\"></a>\r\n#### `Telegraf.sendVideo(chatId, video, extra)` => `Promise`\r\n\r\nSends video.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `Integer`/`String` | Chat id |\r\n| video | [`File`](#file) | Document |\r\n| extra | `Object` | [Optional parameters](https://core.telegram.org/bots/api#sendvideo)|\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#sendvideo)\r\n* * *\r\n\r\n<a name=\"sendvoice\"></a>\r\n#### `Telegraf.sendVoice(chatId, voice, extra)` => `Promise`\r\n\r\nSends voice.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `Integer`/`String` | Chat id |\r\n| voice | [`File`](#file) | Document |\r\n| extra | `Object` | [Optional parameters](https://core.telegram.org/bots/api#sendvoice)|\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#sendvoice)\r\n* * *\r\n\r\n<a name=\"sendchataction\"></a>\r\n#### `Telegraf.sendChatAction(chatId, action)` => `Promise`\r\n\r\nSends chat action.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `Integer`/`String` | Chat id |\r\n| action | `String` | [Chat action](https://core.telegram.org/bots/api#sendchataction) |\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#sendchataction)\r\n* * *\r\n\r\n<a name=\"getme\"></a>\r\n#### `Telegraf.getMe()` => `Promise`\r\n\r\nReturns basic information about the bot.\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#getme)\r\n* * *\r\n\r\n<a name=\"getuserprofilephotos\"></a>\r\n#### `Telegraf.getUserProfilePhotos(userId, offset, limit)` => `Promise`\r\n\r\nReturns profiles photos for provided user.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| userId | `Integer` | Chat id |\r\n| offset | `Integer` | Offset |\r\n| userId | `limit` | Limit |\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#getuserprofilephotos)\r\n* * *\r\n\r\n<a name=\"getfile\"></a>\r\n#### `Telegraf.getFile(fileId)` => `Promise`\r\n\r\nReturns basic info about a file and prepare it for downloading.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| fileId | `String` | File id |\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#getfile)\r\n* * *\r\n\r\n<a name=\"getFileLink\"></a>\r\n#### `Telegraf.getFileLink(fileId)` => `Promise`\r\n\r\nReturns link to file.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| fileId | `String` | File id |\r\n\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#getFileLink)\r\n* * *\r\n\r\n<a name=\"setwebhook\"></a>\r\n#### `Telegraf.setWebHook(url, [cert])` => `Promise`\r\n\r\nSpecifies an url to receive incoming updates via an outgoing webHook.\r\n\r\n| Param | Type | Description |\r\n| ---  | --- | --- |\r\n| url  | `String` | File id |\r\n| cert | [`File`](#file) | SSL public certificate |\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#setwebhook)\r\n* * *\r\n\r\n<a name=\"removewebhook\"></a>\r\n#### `Telegraf.removeWebHook()` => `Promise`\r\n\r\nRemoves webhook. Shortcut for `Telegraf.setWebHook('')`\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#removewebhook)\r\n\r\n* * *\r\n<a name=\"kickchatmember\"></a>\r\n#### `Telegraf.kickChatMember(chatId, userId)` => `Promise`\r\n\r\nUse this method to kick a user from a group or a supergroup.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `Integer`/`String` | Chat id |\r\n| userId | `Integer` | User id |\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#kickchatmember)\r\n* * *\r\n\r\n<a name=\"unbanchatmember\"></a>\r\n#### `Telegraf.unbanChatMember(chatId, userId)` => `Promise`\r\n\r\nUse this method to unban a previously kicked user in a supergroup.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `Integer`/`String` | Chat id |\r\n| userId | `Integer` | User id |\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#unbanchatmember)\r\n* * *\r\n\r\n<a name=\"answerinlinequery\"></a>\r\n#### `Telegraf.answerInlineQuery(inlineQueryId, results, extra)` => `Promise`\r\n\r\nUse this method to send answers to an inline query.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| inlineQueryId | `String` | Query id |\r\n| results | `Array` | Results |\r\n| extra | `Object` | [Optional parameters](https://core.telegram.org/bots/api#answerinlinequery)|\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#answerinlinequery)\r\n* * *\r\n\r\n<a name=\"answercallbackquery\"></a>\r\n#### `Telegraf.answerCallbackQuery(callbackQueryId, text, showAlert)` => `Promise`\r\n\r\nUse this method to send answers to callback queries.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| callbackQueryId | `String` | Query id |\r\n| text | `String` | Notification text |\r\n| showAlert | `Bool` | Show alert instead of notification |\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#answercallbackquery)\r\n* * *\r\n\r\n<a name=\"editmessagetext\"></a>\r\n#### `Telegraf.editMessageText(chatId, messageId, text, extra)` => `Promise`\r\n\r\nUse this method to edit text messages sent by the bot or via the bot.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `Integer`/`String` | Chat id |\r\n| messageId | `String` | Message id |\r\n| text | `String` | Message |\r\n| extra | `Object` | [Optional parameters](https://core.telegram.org/bots/api#editmessagetext)|\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#editmessagetext)\r\n* * *\r\n\r\n<a name=\"editmessagecaption\"></a>\r\n#### `Telegraf.editMessageCaption(chatId, messageId, caption, extra)` => `Promise`\r\n\r\nUse this method to edit captions of messages sent by the bot or via the bot\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `Integer`/`String` | Chat id |\r\n| messageId | `String` | Message id |\r\n| caption | `String` | Caption |\r\n| extra | `Object` | [Optional parameters](https://core.telegram.org/bots/api#editmessagecaption)|\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#editmessagecaption)\r\n* * *\r\n\r\n<a name=\"editmessagereplymarkup\"></a>\r\n#### `Telegraf.editMessageReplyMarkup(chatId, messageId, markup, extra)` => `Promise`\r\n\r\nUse this method to edit only the reply markup of messages sent by the bot or via the bot.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `Integer`/`String` | Chat id |\r\n| messageId | `String` | Message id |\r\n| markup | `Object` | Keyboard markup |\r\n| extra | `Object` | [Optional parameters](https://core.telegram.org/bots/api#editmessagereplymarkup)|\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#editmessagereplymarkup)\r\n\r\n#### File\r\n\r\nThis object represents the contents of a file to be uploaded.\r\n\r\nSupported file sources:\r\n\r\n* `File path`\r\n* `Buffer`\r\n* `ReadStream`\r\n* `Existing file_id`\r\n\r\nExample:\r\n```js\r\n  // send file\r\n  app.sendVideo('chatId', {source: '/path/to/video.mp4'}})\r\n  \r\n  // send buffer\r\n  app.sendVoice('chatId', {source: new Buffer(...)})\r\n\r\n  // send stream\r\n  app.sendAudio('chatId', {source: fs.createReadStream('/path/to/video.mp4')})\r\n\r\n  // resend existing file\r\n  app.sendSticker('chatId', '123123jkbhj6b')\r\n```\r\n\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#file)\r\n\r\n### Events\r\n\r\nSupported events:\r\n\r\n* `text`\r\n* `audio`\r\n* `document`\r\n* `photo`\r\n* `sticker`\r\n* `video`\r\n* `voice`\r\n* `contact`\r\n* `location`\r\n* `venue`\r\n* `new_chat_participant`\r\n* `left_chat_participant`\r\n* `new_chat_title`\r\n* `new_chat_photo`\r\n* `delete_chat_photo`\r\n* `group_chat_created`\r\n* `supergroup_chat_created`\r\n* `channel_chat_created`\r\n* `migrate_to_chat_id`\r\n* `migrate_from_chat_id`\r\n* `pinned_message`\r\n* `inline_query`\r\n* `chosen_inline_result`\r\n* `callback_query`\r\n\r\nAlso, Telegraf will emit `message` event for for all messages except `inline_query`, `chosen_inline_result` and `callback_query`.\r\n\r\n```js\r\n\r\n// Handle stickers and photos\r\napp.on(['sticker', 'photo'], function * () {\r\n  console.log(this.message)\r\n  this.reply('Cool!')\r\n})\r\n\r\n// Handle all messages except `inline_query`, `chosen_inline_result` and `callback_query`\r\napp.on('message', function * () {\r\n  this.reply('Hey there!')\r\n})\r\n```\r\n[Related Telegram api docs](https://core.telegram.org/bots/api#message)\r\n\r\n### Shortcuts\r\n\r\nTelegraf context have many handy shortcuts.\r\n\r\n    Note: shortcuts are not available for `inline_query` and `chosen_inline_result` events.\r\n\r\n```js\r\nvar app = new Telegraf(process.env.BOT_TOKEN)\r\n\r\napp.on('text', function * (){\r\n  // Simple usage \r\n  app.sendMessage(this.message.chat.id, `Hello ${this.state.role}`)\r\n  \r\n  // Using shortcut\r\n  this.reply(`Hello ${this.state.role}`)\r\n\r\n  // If you want to mark message as reply to source message\r\n  this.reply(`Hello ${this.state.role}`, { reply_to_message_id: this.message.id })\r\n})\r\n```\r\n\r\n* `reply()` -> `app.sendMessage()`\r\n* `replyWithPhoto()` -> `app.sendPhoto()`\r\n* `replyWithAudio()` -> `app.sendAudio()`\r\n* `replyWithDocument()` -> `app.sendDocument()`\r\n* `replyWithSticker()` -> `app.sendSticker()`\r\n* `replyWithVideo()` -> `app.sendVideo()`\r\n* `replyWithVoice()` -> `app.sendVoice()`\r\n* `replyWithChatAction()` -> `app.sendChatAction()`\r\n* `replyWithLocation()` -> `app.sendLocation()`\r\n\r\n## License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2016 Telegraf\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}
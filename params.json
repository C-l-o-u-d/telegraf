{
  "name": "Telegraf",
  "tagline": "ðŸ“¢ Modern Telegram bot framework for Node.js",
  "body": "## Features\r\n\r\n- Full [Telegram Bot API 2.1](https://core.telegram.org/bots/api) support\r\n- [Inline mode](https://core.telegram.org/bots/api#inline-mode)\r\n- Middleware support([Community middlewares on npm](https://www.npmjs.com/search?q=telegraf-))\r\n- HTTP/HTTPS webhooks\r\n- Connect/express.js webhooks\r\n- Reply via webhook connection\r\n\r\n## Installation\r\n\r\n```js\r\n$ npm install telegraf\r\n```\r\n\r\n## Example\r\n  \r\n```js\r\nvar Telegraf = require('telegraf');\r\nvar telegraf = new Telegraf(process.env.BOT_TOKEN);\r\n\r\n// Message handling\r\ntelegraf.on('message', function * () {\r\n  this.reply('*42*', { parse_mode: 'Markdown' })\r\n})\r\n\r\ntelegraf.startPolling()\r\n```\r\n\r\n### One more example\r\n\r\n```js\r\nvar Telegraf = require('telegraf');\r\nvar telegraf = new Telegraf(process.env.BOT_TOKEN);\r\n\r\n// Look ma, middleware!\r\nvar sayYoMiddleware = function * (next) {\r\n  yield this.reply('yo')\r\n  yield next\r\n}\r\n\r\n// Command handling\r\ntelegraf.hears('/command', sayYoMiddleware, function * () {\r\n  this.reply('Sure')\r\n})\r\n\r\n// Wow! RegEx\r\ntelegraf.hears(/reverse (.+)/, sayYoMiddleware, function * () {\r\n  this.reply(this.match[1].split('').reverse().join(''))\r\n})\r\n\r\ntelegraf.startPolling()\r\n```\r\n\r\nThere are some other [examples](https://github.com/telegraf/telegraf/tree/master/examples).\r\n\r\n## API\r\n\r\n### Application\r\n\r\nA Telegraf application is an object containing an array of middleware generator functions\r\nwhich are composed and executed in a stack-like manner upon request. Telegraf is similar to many\r\nother middleware systems that you may have encountered such as Koa, Ruby's Rack, Connect, and so on -\r\nhowever a key design decision was made to provide high level \"sugar\" at the otherwise low-level\r\nmiddleware layer. This improves interoperability, robustness, and makes writing middleware much\r\nmore enjoyable. \r\n\r\n```js\r\nvar telegraf = new Telegraf(process.env.BOT_TOKEN)\r\n\r\ntelegraf.on('text', function * (){\r\n  this.reply('Hello World')\r\n})\r\n\r\ntelegraf.startPolling()\r\n```\r\n\r\n### Cascading\r\n\r\nTelegraf middleware cascade in a more traditional way as you may be used to with similar tools -\r\nthis was previously difficult to make user friendly with node's use of callbacks.\r\nHowever with generators we can achieve \"true\" middleware. Contrasting Connect's implementation which\r\nsimply passes control through series of functions until one returns, Telegraf yields \"downstream\", then\r\ncontrol flows back \"upstream\".\r\n\r\nThe following example bot will reply with \"Hello World\", however first the message flows through\r\nthe `logger` middleware to mark when the message has been received. When a middleware invokes `yield next`\r\nthe function suspends and passes control to the next middleware defined. After there are no more\r\nmiddleware to execute downstream, the stack will unwind and each middleware is resumed to perform\r\nits upstream behaviour.\r\n\r\n```js\r\nvar telegraf = new Telegraf(process.env.BOT_TOKEN)\r\n\r\n// Logger middleware\r\ntelegraf.use(function * (next){\r\n  var start = new Date\r\n  this.state.started = start\r\n  yield next\r\n  var ms = new Date - start\r\n  debug('response time %sms', ms)\r\n})\r\n\r\ntelegraf.on('text', function * (){\r\n  this.reply('Hello World')\r\n})\r\n```\r\n\r\n### Context\r\n\r\nA Telegraf Context encapsulates telegram message.\r\nContext is created per request, and is referenced in middleware as the receiver, or the this identifier, as shown in the following snippet:\r\n\r\n```js\r\ntelegraf.use(function * () {\r\n  this.telegraf             // Telegraf instance\r\n  this.updateType           // Update type(message, inline_query, etc.)\r\n  [this.updateSubType]      // Update subtype(text, sticker, audio, etc.)\r\n  [this.message]            // Received message\r\n  [this.editedMessage]      // Edited message\r\n  [this.inlineQuery]        // Received inline query\r\n  [this.chosenInlineResult] // Received inline query result\r\n  [this.callbackQuery]      // Received callback query\r\n  [this.chat]               // Current chat info\r\n  [this.from]               // Sender info\r\n  [this.match]              // Regex match (available only for `hears` handler)\r\n})\r\n```\r\n\r\nThe recommended way to extend application context.\r\n\r\n```js\r\nvar telegraf = new Telegraf(process.env.BOT_TOKEN)\r\n\r\ntelegraf.context.db = {\r\n  getScores: function () { return 42 }\r\n}\r\n\r\ntelegraf.on('text', function * (){\r\n  var scores = this.db.getScores(this.message.from.username)\r\n  this.reply(`${this.message.from.username}: ${score}`)\r\n})\r\n```\r\n\r\n### Update types\r\n\r\nSupported update types:\r\n\r\n- `message`\r\n- `edited_message`\r\n- `inline_query`\r\n- `chosen_inline_result`\r\n- `callback_query`\r\n\r\nAvailable update sub-types:\r\n\r\n- `text`\r\n- `audio`\r\n- `document`\r\n- `photo`\r\n- `sticker`\r\n- `video`\r\n- `voice`\r\n- `contact`\r\n- `location`\r\n- `venue`\r\n- `new_chat_member`\r\n- `left_chat_member`\r\n- `new_chat_title`\r\n- `new_chat_photo`\r\n- `delete_chat_photo`\r\n- `group_chat_created`\r\n- `supergroup_chat_created`\r\n- `channel_chat_created`\r\n- `migrate_to_chat_id`\r\n- `migrate_from_chat_id`\r\n- `pinned_message`\r\n\r\n```js\r\n\r\n// Handle message update\r\ntelegraf.on('message', function * () {\r\n  this.reply('Hey there!')\r\n})\r\n\r\n// Handle sticker update\r\ntelegraf.on(['sticker', 'photo'], function * () {\r\n  console.log(this.message)\r\n  this.reply('Cool!')\r\n})\r\n\r\n```\r\n<sub>[Related Telegram api docs](https://core.telegram.org/bots/api#message)</sub>\r\n\r\n### State\r\n\r\nThe recommended namespace to share information between middlewares.\r\n\r\n```js\r\nvar telegraf = new Telegraf(process.env.BOT_TOKEN)\r\n\r\ntelegraf.use(function * (next) {\r\n  this.state.role = getUserRole(this.message) \r\n  yield next\r\n})\r\n\r\ntelegraf.on('text', function * (){\r\n  this.reply(`Hello ${this.state.role}`)\r\n})\r\n```\r\n\r\n### Session\r\n\r\n```js\r\nvar telegraf = new Telegraf(process.env.BOT_TOKEN)\r\n\r\n// Session state will be lost on app restart\r\ntelegraf.use(Telegraf.memorySession())\r\n\r\ntelegraf.on('text', function * (){\r\n  this.session.counter = this.session.counter || 0\r\n  this.session.counter++\r\n  this.reply(`Message counter:${this.session.counter}`)\r\n})\r\n```\r\n\r\n**Important: For production environment use any of [`telegraf-session-*`](https://www.npmjs.com/search?q=telegraf-session) middleware.**\r\n\r\n\r\n### Telegram WebHook\r\n\r\n```js\r\n\r\nvar telegraf = new Telegraf(process.env.BOT_TOKEN)\r\n\r\n// TLS options\r\nvar tlsOptions = {\r\n  key: fs.readFileSync('server-key.pem'),\r\n  cert: fs.readFileSync('server-cert.pem'),\r\n  // This is necessary only if the client \r\n  // uses the self-signed certificate.\r\n  ca: [ fs.readFileSync('client-cert.pem') ]\r\n}\r\n\r\n// Set telegram webhook\r\ntelegraf.setWebHook('https://server.tld:8443/secret-path', {\r\n  content: 'server-cert.pem'\r\n})\r\n\r\n// Start https webhook\r\ntelegraf.startWebHook('/secret-path', tlsOptions, 8443)\r\n\r\n\r\n// Http webhook, for nginx/heroku users.\r\ntelegraf.startWebHook('/secret-path', null, 5000)\r\n\r\n\r\n// Use webHookCallback() if you want attach telegraf to existing http server\r\nrequire('http')\r\n  .createServer(telegraf.webHookCallback('/secret-path'))\r\n  .listen(3000)\r\n\r\nrequire('https')\r\n  .createServer(tlsOptions, telegraf.webHookCallback('/secret-path'))\r\n  .listen(8443)\r\n\r\n// Connect/Express.js integration\r\nvar express = require('express')\r\nvar app = express()\r\n\r\napp.use(telegraf.webHookCallback('/secret-path'))\r\n\r\napp.get('/', function (req, res) {\r\n  res.send('Hello World!')\r\n})\r\n\r\napp.listen(3000, function () {\r\n  console.log('Example app listening on port 3000!')\r\n})\r\n\r\n```\r\n\r\n### Error Handling\r\n\r\nBy default Telegraf will print all errors to stderr and rethrow error. \r\nTo perform custom error-handling logic you can set `onError` handler:\r\n\r\n```js\r\ntelegraf.onError = function(err){\r\n  log.error('server error', err)\r\n  throw err\r\n}\r\n```\r\n\r\n### Shortcuts\r\n\r\nTelegraf context shortcuts:\r\n\r\nAvailable shortcuts:\r\n\r\n**message** update:\r\n\r\n- `getChat() -> `[`telegraf.getChat()`](#getchat)\r\n- `getChatAdministrators() -> `[`telegraf.getChatAdministrators()`](#getchatadministrators)\r\n- `getChatMember() -> `[`telegraf.getChatMember()`](#getchatmember)\r\n- `getChatMembersCount() -> `[`telegraf.getChatMembersCount()`](#getchatmemberscount)\r\n- `leaveChat() -> `[`telegraf.leaveChat()`](#leavechat)\r\n- `reply() -> `[`telegraf.sendMessage()`](#sendmessage)\r\n- `replyWithAudio() -> `[`telegraf.sendAudio()`](#sendaudio)\r\n- `replyWithChatAction() -> `[`telegraf.sendChatAction()`](#sendchataction)\r\n- `replyWithDocument() -> `[`telegraf.sendDocument()`](#senddocument)\r\n- `replyWithLocation() -> `[`telegraf.sendLocation()`](#sendlocation)\r\n- `replyWithPhoto() -> `[`telegraf.sendPhoto()`](#sendphoto)\r\n- `replyWithSticker() -> `[`telegraf.sendSticker()`](#sendsticker)\r\n- `replyWithVideo() -> `[`telegraf.sendVideo()`](#sendvideo)\r\n- `replyWithVoice() -> `[`telegraf.sendVoice()`](#sendvoice)\r\n\r\n**callback_query** update:\r\n\r\n- `answerCallbackQuery() -> `[`telegraf.answerCallbackQuery()`](#answercallbackquery)\r\n- `getChat() -> `[`telegraf.getChat()`](#getchat)\r\n- `getChatAdministrators() -> `[`telegraf.getChatAdministrators()`](#getchatadministrators)\r\n- `getChatMember() -> `[`telegraf.getChatMember()`](#getchatmember)\r\n- `getChatMembersCount() -> `[`telegraf.getChatMembersCount()`](#getchatmemberscount)\r\n- `leaveChat() -> `[`telegraf.leaveChat()`](#leavechat)\r\n- `reply() -> `[`telegraf.sendMessage()`](#sendmessage)\r\n- `replyWithAudio() -> `[`telegraf.sendAudio()`](#sendaudio)\r\n- `replyWithChatAction() -> `[`telegraf.sendChatAction()`](#sendchataction)\r\n- `replyWithDocument() -> `[`telegraf.sendDocument()`](#senddocument)\r\n- `replyWithLocation() -> `[`telegraf.sendLocation()`](#sendlocation)\r\n- `replyWithPhoto() -> `[`telegraf.sendPhoto()`](#sendphoto)\r\n- `replyWithSticker() -> `[`telegraf.sendSticker()`](#sendsticker)\r\n- `replyWithVideo() -> `[`telegraf.sendVideo()`](#sendvideo)\r\n- `replyWithVoice() -> `[`telegraf.sendVoice()`](#sendvoice)\r\n\r\n**inline_query** update:\r\n\r\n- `answerInlineQuery() -> `[`telegraf.answerInlineQuery()`](#answerinlinequery)\r\n\r\n#### Examples\r\n\r\n```js\r\nvar telegraf = new Telegraf(process.env.BOT_TOKEN)\r\n\r\ntelegraf.on('text', function * (){\r\n  // Simple usage \r\n  telegraf.sendMessage(this.message.chat.id, `Hello ${this.state.role}`)\r\n  \r\n  // Using shortcut\r\n  this.reply(`Hello ${this.state.role}`)\r\n\r\n  // If you want to mark message as reply to source message\r\n  this.reply(`Hello ${this.state.role}`, { reply_to_message_id: this.message.id })\r\n})\r\n\r\ntelegraf.on('/quit', function * (){\r\n  // Simple usage \r\n  telegraf.leaveChat(this.message.chat.id)\r\n  \r\n  // Using shortcut\r\n  this.leaveChat()\r\n})\r\n\r\ntelegraf.on('callback_query', function * (){\r\n  // Simple usage \r\n  telegraf.answerCallbackQuery(this.callbackQuery.id)\r\n  \r\n  // Using shortcut\r\n  this.answerCallbackQuery()\r\n})\r\n\r\ntelegraf.on('inline_query', function * (){\r\n  var result = []\r\n  // Simple usage \r\n  telegraf.answerInlineQuery(this.inlineQuery.id, result)\r\n  \r\n  // Using shortcut\r\n  this.answerInlineQuery(result)\r\n})\r\n```\r\n\r\n## API reference\r\n\r\n- [`Telegraf.handler(messageType, handler, [handler...])`](#handler)\r\n- [`Telegraf.compose(handlers)`](#compose)\r\n- [`new Telegraf(token)`](#new)\r\n  - [`.answerCallbackQuery(callbackQueryId, text, showAlert)`](#answercallbackquery)\r\n  - [`.answerInlineQuery(inlineQueryId, results, extra)`](#answerinlinequery)\r\n  - [`.editMessageCaption(chatId, messageId, caption, extra)`](#editmessagecaption)\r\n  - [`.editMessageReplyMarkup(chatId, messageId, markup, extra)`](#editmessagereplymarkup)\r\n  - [`.editMessageText(chatId, messageId, text, extra)`](#editmessagetext)\r\n  - [`.forwardMessage(chatId, fromChatId, messageId, extra)`](#forwardmessage)\r\n  - [`.getChat(chatId)`](#getchat)\r\n  - [`.getChatAdministrators(chatId)`](#getchatadministrators)\r\n  - [`.getChatMember(chatId, userId)`](#getchatmember)\r\n  - [`.getChatMembersCount(chatId)`](#getchatmemberscount)\r\n  - [`.getFile(fileId)`](#getfile)\r\n  - [`.getFileLink(fileId)`](#getFileLink)\r\n  - [`.getMe()`](#getme)\r\n  - [`.getUserProfilePhotos(userId, offset, limit)`](#getuserprofilephotos)\r\n  - [`.handleUpdate(rawUpdate, response)`](#handleupdate)\r\n  - [`.hears(string|ReGex, handler, [handler...])`](#hears)\r\n  - [`.kickChatMember(chatId, userId)`](#kickchatmember)\r\n  - [`.leaveChat(chatId)`](#leavechat)\r\n  - [`.on(messageType, handler, [handler...])`](#on)\r\n  - [`.removeWebHook()`](#removewebhook)\r\n  - [`.sendAudio(chatId, audio, extra)`](#sendaudio)\r\n  - [`.sendChatAction(chatId, action)`](#sendchataction)\r\n  - [`.sendContact(chatId, phoneNumber, firstName, extra)`](#sendcontact)\r\n  - [`.sendDocument(chatId, doc, extra)`](#senddocument)\r\n  - [`.sendLocation(chatId, latitude, longitude, extra)`](#sendlocation)\r\n  - [`.sendMessage(chatId, text, extra)`](#sendmessage)\r\n  - [`.sendPhoto(chatId, photo, extra)`](#sendphoto)\r\n  - [`.sendSticker(chatId, sticker, extra)`](#sendsticker)\r\n  - [`.sendVenue(chatId, latitude, longitude, title, address, extra)`](#sendvenue)\r\n  - [`.sendVideo(chatId, video, extra)`](#sendvideo)\r\n  - [`.sendVoice(chatId, voice, extra)`](#sendvoice)\r\n  - [`.setWebHook(url, cert)`](#setwebhook)\r\n  - [`.startPolling(timeout, limit)`](#startPolling)\r\n  - [`.startWebHook(webHookPath, tlsOptions, port, [host])`](#startwebhook)\r\n  - [`.stop()`](#stop)\r\n  - [`.unbanChatMember(chatId, userId)`](#unbanchatmember)\r\n  - [`.use(function)`](#use)\r\n  - [`.webHookCallback(webHookPath)`](#webhookcallback)\r\n\r\n***\r\n\r\n<a name=\"handler\"></a>\r\n##### `Telegraf.handler(updateType, handler, [handler...]) => GeneratorFunction`\r\n\r\nGenerates middleware for handling provided [update type](#update-types).\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| updateType | `string`\\|`string[]` | [update type](#update-types) |\r\n| handler | `GeneratorFunction` | Handler |\r\n\r\n* * *\r\n\r\n<a name=\"compose\"></a>\r\n##### `Telegraf.compose(handlers) => GeneratorFunction`\r\n\r\nCompose `middleware` returning a fully valid middleware comprised of all those which are passed.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| handlers | `GeneratorFunction[]` | Array of handlers |\r\n\r\n* * *\r\n\r\n\r\n<a name=\"new\"></a>\r\n##### `new Telegraf(token)`\r\n\r\nInitialize new Telegraf app.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| token | `string` | [Bot Token](https://core.telegram.org/bots#3-how-do-i-create-a-bot) |\r\n\r\n* * *\r\n\r\n<a name=\"answercallbackquery\"></a>\r\n##### `.answerCallbackQuery(callbackQueryId, text, showAlert) => Promise`\r\n\r\nUse this method to send answers to callback queries.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| callbackQueryId | `string` | Query id |\r\n| [text] | `string` | Notification text |\r\n| [showAlert] | `bool` | Show alert instead of notification |\r\n\r\n<sub>[Related Telegram api docs](https://core.telegram.org/bots/api#answercallbackquery)</sub>\r\n\r\n* * *\r\n\r\n<a name=\"answerinlinequery\"></a>\r\n##### `.answerInlineQuery(inlineQueryId, results, extra) => Promise`\r\n\r\nUse this method to send answers to an inline query.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| inlineQueryId | `string` | Query id |\r\n| results | `object[]` | Results |\r\n| [extra] | `object` | [Extra parameters](https://core.telegram.org/bots/api#answerinlinequery)|\r\n\r\n* * *\r\n\r\n<a name=\"editmessagecaption\"></a>\r\n##### `.editMessageCaption(chatId, messageId, caption, extra) => Promise`\r\n\r\nUse this method to edit captions of messages sent by the bot or via the bot\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n| messageId | `string` | Message id |\r\n| caption | `string` | Caption |\r\n| [extra] | `object` | [Extra parameters](https://core.telegram.org/bots/api#editmessagecaption)|\r\n\r\n* * *\r\n\r\n<a name=\"editmessagereplymarkup\"></a>\r\n##### `.editMessageReplyMarkup(chatId, messageId, markup, extra) => Promise`\r\n\r\nUse this method to edit only the reply markup of messages sent by the bot or via the bot.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n| messageId | `string` | Message id |\r\n| markup | `object` | Keyboard markup |\r\n| [extra] | `object` | [Extra parameters](https://core.telegram.org/bots/api#editmessagereplymarkup)|\r\n\r\n* * *\r\n\r\n<a name=\"editmessagetext\"></a>\r\n##### `.editMessageText(chatId, messageId, text, extra) => Promise`\r\n\r\nUse this method to edit text messages sent by the bot or via the bot.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n| messageId | `string` | Message id |\r\n| text | `string` | Message |\r\n| [extra] | `object` | [Extra parameters](https://core.telegram.org/bots/api#editmessagetext)|\r\n\r\n* * *\r\n\r\n<a name=\"forwardmessage\"></a>\r\n##### `.forwardMessage(chatId, fromChatId, messageId, extra) => Promise`\r\n\r\nForwards message.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Source Chat id |\r\n| fromChatId | `number`\\|`string` | Target Chat id |\r\n| messageId | `number` | Message id |\r\n| [extra] | `object` | [Extra parameters](https://core.telegram.org/bots/api#forwardmessage)|\r\n\r\n* * *\r\n\r\n<a name=\"getchat\"></a>\r\n##### `.getChat(chatId) => Promise`\r\n\r\nUse this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.).\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n\r\n<sub>[Related Telegram api docs](https://core.telegram.org/bots/api#getchat)</sub>\r\n\r\n* * *\r\n\r\n<a name=\"getchatadministrators\"></a>\r\n##### `.getChatAdministrators(chatId) => Promise`\r\n\r\nUse this method to get a list of administrators in a chat. On success, returns an Array of ChatMember objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n\r\n<sub>[Related Telegram api docs](https://core.telegram.org/bots/api#getchatadministrators)</sub>\r\n\r\n* * *\r\n\r\n<a name=\"getchatmember\"></a>\r\n##### `.getChatMember(chatId) => Promise`\r\n\r\nUse this method to get information about a member of a chat.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n\r\n<sub>[Related Telegram api docs](https://core.telegram.org/bots/api#getchatmember)</sub>\r\n\r\n\r\n<a name=\"getchatmemberscount\"></a>\r\n##### `.getChatMembersCount(chatId) => Promise`\r\n\r\nUse this method to get the number of members in a chat.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n\r\n<sub>[Related Telegram api docs](https://core.telegram.org/bots/api#getchatmemberscount)</sub>\r\n\r\n* * *\r\n\r\n<a name=\"getfile\"></a>\r\n##### `.getFile(fileId) => Promise`\r\n\r\nReturns basic info about a file and prepare it for downloading.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| fileId | `string` | File id |\r\n\r\n<sub>[Related Telegram api docs](https://core.telegram.org/bots/api#getfile)</sub>\r\n\r\n* * *\r\n\r\n<a name=\"getFileLink\"></a>\r\n##### `.getFileLink(fileId) => Promise`\r\n\r\nReturns link to file.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| fileId | `string` | File id |\r\n\r\n<sub>[Related Telegram api docs](https://core.telegram.org/bots/api#getFileLink)</sub>\r\n\r\n* * *\r\n\r\n<a name=\"getme\"></a>\r\n##### `.getMe() => Promise`\r\n\r\nReturns basic information about the bot.\r\n\r\n<sub>[Related Telegram api docs](https://core.telegram.org/bots/api#getme)</sub>\r\n\r\n* * *\r\n\r\n<a name=\"getuserprofilephotos\"></a>\r\n##### `.getUserProfilePhotos(userId, offset, limit) => Promise`\r\n\r\nReturns profiles photos for provided user.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| userId | `number` | Chat id |\r\n| offset | `number` | Offset |\r\n| limit | `number` | Limit |\r\n\r\n<sub>[Related Telegram api docs](https://core.telegram.org/bots/api#getuserprofilephotos)</sub>\r\n\r\n* * *\r\n\r\n<a name=\"handleupdate\"></a>\r\n##### `.handleUpdate(rawUpdate, [webHookResponse])`\r\n\r\nHandle raw Telegram update. \r\nIn case you use centralized webhook server, queue, etc.  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| rawUpdate | `object` | Telegram update payload |\r\n| [webHookResponse] | `object` | (Optional) [http.ServerResponse](https://nodejs.org/api/http.html#http_class_http_serverresponse) |\r\n\r\n* * *\r\n\r\n<a name=\"hears\"></a>\r\n##### `.hears(pattern, handler, [handler...])`\r\n\r\nRegisters handler only for `text` updates using string pattern or RegEx.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| pattern | `string`\\|`RegEx` | Pattern or RegEx |\r\n| handler | `GeneratorFunction` | Handler |\r\n\r\n* * *\r\n\r\n<a name=\"kickchatmember\"></a>\r\n##### `.kickChatMember(chatId, userId) => Promise`\r\n\r\nUse this method to kick a user from a group or a supergroup.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n| userId | `number` | User id |\r\n\r\n<sub>[Related Telegram api docs](https://core.telegram.org/bots/api#kickchatmember)</sub>\r\n\r\n\r\n* * *\r\n\r\n<a name=\"leavechat\"></a>\r\n##### `.leaveChat(chatId) => Promise`\r\n\r\nUse this method for your bot to leave a group, supergroup or channel.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n\r\n<sub>[Related Telegram api docs](https://core.telegram.org/bots/api#leavechat)</sub>\r\n\r\n* * *\r\n\r\n<a name=\"on\"></a>\r\n##### `.on(updateType, handler, [handler...])`\r\n\r\nRegisters handler for provided [update type](#update-types).\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| updateType | `string`\\|`string[]` | [update type](#update-types) |\r\n| handler | `GeneratorFunction` | Handler |\r\n\r\n* * *\r\n\r\n<a name=\"removewebhook\"></a>\r\n##### `.removeWebHook() => Promise`\r\n\r\nRemoves webhook. Shortcut for `Telegraf.setWebHook('')`\r\n\r\n<sub>[Related Telegram api docs](https://core.telegram.org/bots/api#removewebhook)</sub>\r\n* * *\r\n\r\n<a name=\"sendaudio\"></a>\r\n##### `.sendAudio(chatId, audio, extra) => Promise`\r\n\r\nSends audio.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n| audio | [`File`](#file) | Document |\r\n| [extra] | `object` | [Extra parameters](https://core.telegram.org/bots/api#sendaudio)|\r\n\r\n* * *\r\n\r\n<a name=\"sendchataction\"></a>\r\n##### `.sendChatAction(chatId, action) => Promise`\r\n\r\nSends chat action.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n| action | `string` | [Chat action](https://core.telegram.org/bots/api#sendchataction) |\r\n\r\n* * *\r\n\r\n<a name=\"sendcontact\"></a>\r\n##### `.sendContact(chatId, phoneNumber, firstName, extra) => Promise`\r\n\r\nSends document.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n| phoneNumber | `string` | Contact phone number |\r\n| firstName | `string` | Contact first name |\r\n| [extra] | `object` | [Extra parameters](https://core.telegram.org/bots/api#sendcontact)|\r\n\r\n* * *\r\n\r\n<a name=\"senddocument\"></a>\r\n##### `.sendDocument(chatId, doc, extra) => Promise`\r\n\r\nSends document.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n| doc | [`File`](#file) | Document |\r\n| [extra] | `object` | [Extra parameters](https://core.telegram.org/bots/api#senddocument)|\r\n\r\n* * *\r\n\r\n<a name=\"sendlocation\"></a>\r\n##### `.sendLocation(chatId, latitude, longitude, extra) => Promise`\r\n\r\nSends location.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n| latitude | `number` | Latitude |\r\n| longitude | `number` | Longitude |\r\n| [extra] | `object` | [Extra parameters](https://core.telegram.org/bots/api#sendlocation)|\r\n\r\n* * *\r\n\r\n<a name=\"sendmessage\"></a>\r\n##### `.sendMessage(chatId, text, extra) => Promise`\r\n\r\nSends text message.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n| text | `string` | Message |\r\n| [extra] | `object` | [Extra parameters](https://core.telegram.org/bots/api#sendmessage)|\r\n\r\n* * *\r\n\r\n<a name=\"sendphoto\"></a>\r\n##### `.sendPhoto(chatId, photo, extra) => Promise`\r\n\r\nSends photo.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n| photo | [`File`](#file) | Photo |\r\n| [extra] | `object` | [Extra parameters](https://core.telegram.org/bots/api#sendphoto)|\r\n\r\n* * *\r\n\r\n<a name=\"sendsticker\"></a>\r\n##### `.sendSticker(chatId, sticker, extra) => Promise`\r\n\r\nSends sticker.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n| sticker | [`File`](#file) | Document |\r\n| [extra] | `object` | [Extra parameters](https://core.telegram.org/bots/api#sendsticker)|\r\n\r\n* * *\r\n\r\n<a name=\"sendvenue\"></a>\r\n##### `.sendVenue(chatId, latitude, longitude, title, address, extra) => Promise`\r\n\r\nSends venue information.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n| latitude | `number` | Latitude |\r\n| longitude | `number` | Longitude |\r\n| title | `string` | Venue title |\r\n| address | `string` | Venue address |\r\n| [extra] | `object` | [Extra parameters](https://core.telegram.org/bots/api#sendvenue)|\r\n\r\n* * *\r\n\r\n<a name=\"sendvideo\"></a>\r\n##### `.sendVideo(chatId, video, extra) => Promise`\r\n\r\nSends video.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n| video | [`File`](#file) | Document |\r\n| [extra] | `object` | [Extra parameters](https://core.telegram.org/bots/api#sendvideo)|\r\n\r\n* * *\r\n\r\n<a name=\"sendvoice\"></a>\r\n##### `.sendVoice(chatId, voice, extra) => Promise`\r\n\r\nSends voice.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n| voice | [`File`](#file) | Document |\r\n| [extra] | `object` | [Extra parameters](https://core.telegram.org/bots/api#sendvoice)|\r\n\r\n* * *\r\n\r\n<a name=\"setwebhook\"></a>\r\n##### `.setWebHook(url, [cert]) => Promise`\r\n\r\nSpecifies an url to receive incoming updates via an outgoing webhook.\r\n\r\n| Param | Type | Description |\r\n| ---  | --- | --- |\r\n| url  | `string` | Public url for webhook |\r\n| [cert] | [`File`](#file) | SSL public certificate |\r\n\r\n<sub>[Related Telegram api docs](https://core.telegram.org/bots/api#setwebhook)</sub>\r\n\r\n* * *\r\n\r\n<a name=\"startwebhook\"></a>\r\n##### `.startWebHook(webHookPath, tlsOptions, port, [host])`\r\n\r\nStart listening @ `https://host:port/webHookPath` for Telegram calls.\r\n\r\n| Param | Type | Description |\r\n| ---  | --- | --- |\r\n| webHookPath | `string` | Webhook url path (see Telegraf.setWebHook) |\r\n| tlsOptions | `object` | (Optional) [TLS server options](https://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener). Pass null to use http |\r\n| port | `number` | Port number |\r\n| [host] | `string` | (Optional) Hostname |\r\n\r\n* * *\r\n\r\n<a name=\"startPolling\"></a>\r\n##### `.startPolling(timeout, limit)`\r\n\r\nStart poll updates.\r\n\r\n| Param | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| timeout | `number` | 0 | Poll timeout |\r\n| limit | `number` | 100 | Limits the number of updates to be retrieved |\r\n\r\n* * *\r\n\r\n<a name=\"stop\"></a>\r\n##### `.stop()`\r\n\r\nStop WebHook and polling\r\n\r\n* * *\r\n\r\n<a name=\"unbanchatmember\"></a>\r\n##### `.unbanChatMember(chatId, userId) => Promise`\r\n\r\nUse this method to unban a previously kicked user in a supergroup.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| chatId | `number`\\|`string` | Chat id |\r\n| userId | `number` | User id |\r\n\r\n<sub>[Related Telegram api docs](https://core.telegram.org/bots/api#unbanchatmember)</sub>\r\n\r\n* * *\r\n\r\n<a name=\"use\"></a>\r\n##### `.use(middleware)`\r\n\r\nRegisters a middleware.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| middleware | `function` | Middleware function |\r\n\r\n* * *\r\n\r\n<a name=\"webhookcallback\"></a>\r\n##### `.webHookCallback(webHookPath) => Function`\r\n\r\nReturn a callback function suitable for the http[s].createServer() method to handle a request. \r\nYou may also use this callback function to mount your telegraf app in a Koa/Connect/Express app.\r\n\r\n| Param | Type | Description |\r\n| ---  | --- | --- |\r\n| webHookPath | `string` | Webhook url path (see Telegraf.setWebHook) |\r\n\r\n### File\r\n\r\nThis object represents the contents of a file to be uploaded.\r\n\r\nSupported file sources:\r\n\r\n- `Existing file_id`\r\n- `File path`\r\n- `Url`\r\n- `Buffer`\r\n- `ReadStream`\r\n\r\nExample:\r\n```js\r\n\r\n  // resend existing file by file_id\r\n  telegraf.sendSticker('chatId', '123123jkbhj6b')\r\n\r\n  // send file\r\n  telegraf.sendVideo('chatId', {\r\n    source: '/path/to/video.mp4'\r\n  })\r\n\r\n   // send stream\r\n  telegraf.sendVideo('chatId', {\r\n    source: fs.createReadStream('/path/to/video.mp4'),\r\n    extension: 'mp4'\r\n  })\r\n  \r\n  // send buffer\r\n  telegraf.sendVoice('chatId', {\r\n    source: new Buffer()\r\n  })\r\n\r\n  // send url\r\n  telegraf.sendAudio('chatId', {\r\n    url: 'http://lorempixel.com/image_output/cats-q-c-640-480-7.jpg'\r\n  })\r\n\r\n```\r\n\r\n<sub>[Related Telegram api docs](https://core.telegram.org/bots/api#file)</sub>\r\n\r\n## License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2016 Telegraf\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}